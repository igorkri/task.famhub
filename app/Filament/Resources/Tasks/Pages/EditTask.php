<?php

namespace App\Filament\Resources\Tasks\Pages;

use App\Filament\Resources\Tasks\TaskResource;
use App\Models\Section;
use App\Models\TaskComment;
use App\Models\User;
use App\Services\AsanaService;
use Asana\Errors\AsanaError;
use Carbon\Carbon;
use Filament\Actions\Action;
use Filament\Actions\DeleteAction;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\EditRecord;
use Filament\Schemas\Components\Section as FormSection;
use Filament\Schemas\Schema;
use Illuminate\Support\Facades\Log;

class EditTask extends EditRecord
{
    protected static string $resource = TaskResource::class;

    protected static bool $hasStickyFooter = false;

    protected array $pendingComments = [];

    protected $listeners = [
        'timer-stopped' => 'refreshTimerData',
        'refreshComponent' => 'refreshTimerData',
    ];

    protected function getHeaderActions(): array
    {
        return [
            $this->getCancelFormAction()
                ->label('–î–æ —Å–ø–∏—Å–∫—É')
                ->formId('form')
                ->icon('heroicon-m-arrow-left')
                ->labeledFrom('md')
                ->extraAttributes([
                    'x-data' => '{}', // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç filamentFormButton
                ]),

            DeleteAction::make()
                ->icon('heroicon-m-trash')
                ->labeledFrom('md'),
        ];
    }

    public function getBreadcrumbs(): array
    {
        $breadcrumbs = parent::getBreadcrumbs();

        $record = $this->getRecord();

        // –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫—â–æ —Ç–∞—Å–∫ –º–∞—î –ø—Ä–æ—î–∫—Ç
        if ($record && $record->project) {
            $projectId = $record->project->id;
            $userId = $record->user_id;
            $asanaProjectGid = $record->project->asana_id ?? null;

            $additionalBreadcrumbs = [];

            // 1. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç–∞—Å–∫—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –ø–æ –ø—Ä–æ—î–∫—Ç—É
            $filterParams = http_build_query([
                'filters' => [
                    'project_id' => ['values' => [$projectId]],
                    'user_id' => ['values' => [$userId]],
                    'status' => [
                        'values' => ['in_progress', 'new', 'needs_clarification'],
                    ],
                    'is_completed' => ['isActive' => false],
                ],
            ]);

            $tasksListUrl = route('filament.admin.resources.tasks.index').'?'.$filterParams;
            $additionalBreadcrumbs[$tasksListUrl] = 'üìã –¢–∞—Å–∫–∏ –ø—Ä–æ—î–∫—Ç—É';

            // 2. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—î–∫—Ç –≤ Asana (—è–∫—â–æ —î)
            if ($record->gid && $asanaProjectGid) {
                $asanaProjectUrl = "https://app.asana.com/0/{$asanaProjectGid}/list";
                $additionalBreadcrumbs[$asanaProjectUrl] = 'üîó '.($record->project->name ?? '–ü—Ä–æ—î–∫—Ç').' –≤ Asana';
            }

            // –í—Å—Ç–∞–≤–ª—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ breadcrumbs –ø—ñ—Å–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ
            $breadcrumbs = array_merge(
                array_slice($breadcrumbs, 0, 1),
                $additionalBreadcrumbs,
                array_slice($breadcrumbs, 1)
            );
        }

        return $breadcrumbs;
    }

    public function content(Schema $schema): Schema
    {
        return $schema->components([
            FormSection::make('sync')
                ->schema([])
                ->afterHeader([
                    Action::make('syncFromAsana')
                        ->label('–û—Ç—Ä–∏–º–∞—Ç–∏ –∑ Asana')
                        ->icon('heroicon-m-arrow-path')
                        ->color('info')
                        ->action(function (): void {
                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
                            $this->save();

                            $this->syncFromAsana();
                        }),

                    Action::make('syncToAsana')
                        ->label('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ Asana')
                        ->icon('heroicon-m-paper-airplane')
                        ->color('primary')
                        ->action(function (): void {
                            $this->save();

                            $this->syncToAsana();
                        }),
                ]),

            $this->getFormContentComponent(),
            $this->getRelationManagersContentComponent(),
        ]);
    }

    protected function getFormActions(): array
    {
        return [
            $this->getSaveFormAction()
                ->keyBindings(['mod+s']),
            $this->getCancelFormAction(),
        ];
    }

    public function syncCommentsFromAsana(): void
    {
        if (! $this->record->gid) {
            Notification::make()
                ->danger()
                ->title('–ü–æ–º–∏–ª–∫–∞')
                ->body('–ó–∞–¥–∞—á–∞ –Ω–µ –º–∞—î GID –∑ Asana')
                ->send();

            return;
        }

        $service = app(AsanaService::class);
        try {
            $asanaComments = $service->getTaskComments($this->record->gid);

            foreach ($asanaComments as $asanaComment) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ç–∞–∫–∏–º gid
                $existingComment = TaskComment::where('asana_gid', $asanaComment['gid'])->first();

                if (! $existingComment) {
                    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–∑ Asana
                    $user = null;
                    if (isset($asanaComment['created_by']['email'])) {
                        $user = User::where('email', $asanaComment['created_by']['email'])->first();
                    }

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    TaskComment::create([
                        'task_id' => $this->record->id,
                        'user_id' => $user ? $user->id : auth()->id(),
                        'asana_gid' => $asanaComment['gid'],
                        'content' => $asanaComment['text'],
                        'asana_created_at' => isset($asanaComment['created_at']) ? Carbon::parse($asanaComment['created_at']) : now(),
                    ]);
                }
            }

            Notification::make()
                ->success()
                ->title('–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑ Asana')
                ->body('–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ '.count($asanaComments).' –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤')
                ->send();

            $this->refresh();
        } catch (\Exception $e) {
            Notification::make()
                ->danger()
                ->title('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤')
                ->body($e->getMessage())
                ->send();
        }
    }

    public function syncCommentsToAsana(): void
    {
        if (! $this->record->gid) {
            Notification::make()
                ->danger()
                ->title('–ü–æ–º–∏–ª–∫–∞')
                ->body('–ó–∞–¥–∞—á–∞ –Ω–µ –º–∞—î GID –∑ Asana')
                ->send();

            return;
        }

        $service = app(AsanaService::class);
        $syncedCount = 0;
        $errorCount = 0;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–µ–∑ asana_gid (–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        $unsyncedComments = $this->record->comments()->whereNull('asana_gid')->get();

        foreach ($unsyncedComments as $comment) {
            try {
                $result = $service->addCommentToTask($this->record->gid, $comment->content);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å GID –∏–∑ Asana
                $comment->update([
                    'asana_gid' => $result['gid'] ?? null,
                ]);

                $syncedCount++;

                Log::info('Comment synced to Asana', [
                    'task_id' => $this->record->id,
                    'comment_id' => $comment->id,
                    'comment_gid' => $result['gid'] ?? null,
                ]);
            } catch (\Exception $e) {
                $errorCount++;
                Log::error('Failed to sync comment to Asana', [
                    'task_id' => $this->record->id,
                    'comment_id' => $comment->id,
                    'error' => $e->getMessage(),
                ]);
            }
        }

        if ($syncedCount > 0) {
            Notification::make()
                ->success()
                ->title('–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤ Asana')
                ->body("–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {$syncedCount} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤".
                      ($errorCount > 0 ? ", –ø–æ–º–∏–ª–æ–∫: {$errorCount}" : ''))
                ->send();
        } elseif ($errorCount > 0) {
            Notification::make()
                ->danger()
                ->title('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤')
                ->body("–ü–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {$errorCount}")
                ->send();
        } else {
            Notification::make()
                ->info()
                ->title('–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤')
                ->body('–í—Å—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –∑ Asana')
                ->send();
        }

        $this->refresh();
    }

    public function syncFromAsana(): void
    {
        $service = app(AsanaService::class);
        try {
            $data = $service->getTaskDetails($this->record->gid);

            $updateData = [
                'title' => $data['name'] ?? $this->record->title,
                'description' => $data['notes'] ?? $this->record->description,
                'is_completed' => $data['completed'] ?? $this->record->is_completed,
            ];

            // –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Asana
            if (isset($data['created_at']) && $data['created_at']) {
                try {
                    $updateData['created_at'] = Carbon::parse($data['created_at']);
                } catch (\Exception $e) {
                    Log::warning('Failed to parse Asana created_at', [
                        'task_id' => $this->record->id,
                        'created_at' => $data['created_at'],
                        'error' => $e->getMessage(),
                    ]);
                }
            }

            if (isset($data['modified_at']) && $data['modified_at']) {
                try {
                    $updateData['updated_at'] = Carbon::parse($data['modified_at']);
                } catch (\Exception $e) {
                    Log::warning('Failed to parse Asana modified_at', [
                        'task_id' => $this->record->id,
                        'modified_at' => $data['modified_at'],
                        'error' => $e->getMessage(),
                    ]);
                }
            }

            // –î–µ–¥–ª–∞–π–Ω
            if (isset($data['due_on']) && $data['due_on']) {
                $updateData['deadline'] = $data['due_on'];
            }

            // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
            if (isset($data['start_on']) && $data['start_on']) {
                $updateData['start_date'] = $data['start_on'];
            }

            // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            if (isset($data['assignee']) && $data['assignee']) {
                $assigneeGid = $data['assignee']['gid'] ?? null;
                if ($assigneeGid) {
                    $user = \App\Models\User::where('asana_gid', $assigneeGid)->first();
                    if ($user) {
                        $updateData['user_id'] = $user->id;
                    }
                }
            }

            // –°—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–∫—Ü–∏–∏
            if (isset($data['memberships']) && is_array($data['memberships'])) {
                foreach ($data['memberships'] as $membership) {
                    if (isset($membership['section']) && $membership['section']) {
                        $section = \App\Models\Section::where('asana_gid', $membership['section']['gid'])->first();
                        if ($section && $section->status) {
                            $updateData['status'] = $section->status;
                            break;
                        }
                    }
                }
            }

            // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
            if (isset($data['custom_fields']) && is_array($data['custom_fields'])) {
                foreach ($data['custom_fields'] as $customField) {
                    $fieldGid = $customField['gid'] ?? null;
                    $value = $customField['enum_value'] ?? $customField['number_value'] ?? $customField['text_value'] ?? null;

                    if ($fieldGid === '1202674799521449' && $value) { // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                        $priorityMap = [
                            '–í–∏—Å–æ–∫–∏–π' => 'high',
                            '–°—Ä–µ–¥–Ω—ñ–π' => 'medium',
                            '–ù–∏–∑—å–∫–∏–π' => 'low',
                            '–ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–∞' => 'low', // –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                        ];
                        $valueName = is_array($value) ? ($value['name'] ?? '') : '';
                        $updateData['priority'] = $priorityMap[$valueName] ?? 'low';
                    }

                    if ($fieldGid === '1205860710071790' && $value) { // –¢–∏–ø –∑–∞–¥–∞—á—ñ
                        // –ú–æ–∂–Ω–æ –º–∞–ø–ø–∏—Ç—å –Ω–∞ status –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                        // –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º –∏–ª–∏ –¥–æ–±–∞–≤–∏–º –≤ status
                        $typeMap = [
                            '–ü–æ–º–∏–ª–∫–∞ —Å–∞–π—Ç' => 'needs_clarification',
                            '–ü–æ–º–∏–ª–∫–∞ –≤ 1–°' => 'needs_clarification',
                            '–ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è' => 'new',
                            '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è' => 'in_progress',
                            '–û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è' => 'in_progress',
                            '–ù–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç (—Ä–æ–∑—Ä–æ–±–∫–∞)' => 'new',
                        ];
                        $valueName = is_array($value) ? ($value['name'] ?? '') : '';
                        if (! isset($updateData['status'])) {
                            $updateData['status'] = $typeMap[$valueName] ?? 'new';
                        }
                    }

                    if ($fieldGid === '1202687202895300' && isset($customField['number_value'])) { // –ë—é–¥–∂–µ—Ç (—á–∞—Å—ã –ø–ª–∞–Ω)
                        $updateData['budget'] = (float) $customField['number_value'];
                    }

                    if ($fieldGid === '1202687202895302' && isset($customField['number_value'])) { // –í–∏—Ç—Ä–∞—á–µ–Ω–æ (—á–∞—Å—ã —Ñ–∞–∫—Ç)
                        $updateData['spent'] = (float) $customField['number_value'];
                    }
                }
            }

            // dd([
            //                 'membership' => $membership,
            //                 'section' => $section,
            //                 'status' => $section ? $section->status : null,
            //                 'updateData' => $updateData,
            //             ]);
            $this->record->update($updateData);

            Notification::make()
                ->success()
                ->title('–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Asana —É—Å–ø—ñ—à–Ω–∞')
                ->send();
            $this->refresh();
            $this->fillForm($this->record->fresh()->toArray());

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            $this->syncCommentsFromAsana();
        } catch (AsanaError $e) {
            Notification::make()
                ->danger()
                ->title('–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Asana')
                ->body($e->getMessage())
                ->send();
        }
    }

    public function syncToAsana(): void
    {
        if (! $this->record->gid) {
            Notification::make()
                ->danger()
                ->title('–ü–æ–º–∏–ª–∫–∞')
                ->body('–ó–∞–¥–∞—á–∞ –Ω–µ –º–∞—î GID –∑ Asana')
                ->send();

            // —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—É –≤ Asana —ñ –æ—Ç—Ä–∏–º—É—î–º–æ gid
            $this->createTaskInAsana();

            return;
        }

        $service = app(AsanaService::class);
        $payload = [
            'name' => $this->record->title,
            'notes' => $this->record->description ?? '',
            'completed' => (bool) $this->record->is_completed,
        ];

        // –î–µ–¥–ª–∞–π–Ω
        if ($this->record->deadline) {
            try {
                $payload['due_on'] = Carbon::parse($this->record->deadline)->toDateString();
            } catch (\Exception $e) {
                Log::warning('Invalid deadline format', [
                    'task_id' => $this->record->id,
                    'deadline' => $this->record->deadline,
                ]);
            }
        }

        // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        if ($this->record->start_date) {
            try {
                $payload['start_on'] = Carbon::parse($this->record->start_date)->toDateString();
            } catch (\Exception $e) {
                Log::warning('Invalid start_date format', [
                    'task_id' => $this->record->id,
                    'start_date' => $this->record->start_date,
                ]);
            }
        }

        // TODO: –î–æ—Ä–æ–±–∏—Ç–∏ –ª–æ–≥—ñ–∫—É –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º–∏ –ø–æ–ª—è–º–∏. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª —è–∫ –≤ Section —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –∑–≤'—è–∑—è—Ç–∏ –∑ –ø—Ä–æ–µ–∫—Ç–æ–º

        // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫–∏
        // API Asana –æ—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø–æ–ª—è–º –∏ –∏—Ö –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ
        // –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏ –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥

        //        $customFields = [];
        //
        //        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º gid –æ–ø—Ü–∏–∏
        //        if ($this->record->priority) {
        //            $priorityMap = [
        //                'high' => '1202674799522489', // –í–∏—Å–æ–∫–∏–π
        //                'medium' => '1202674799522531', // –°—Ä–µ–¥–Ω—ñ–π
        //                'low' => '1202674799522561', // –ù–∏–∑—å–∫–∏–π
        //            ];
        //            $priorityGid = $priorityMap[$this->record->priority] ?? null;
        //            if ($priorityGid) {
        //                $customFields['1202674799521449'] = $priorityGid;
        //            }
        //        }
        //
        //        // –¢–∏–ø –∑–∞–¥–∞—á–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º gid –æ–ø—Ü–∏–∏
        //        if ($this->record->status) {
        //            $statusMap = [
        //                'new' => '1205860710071792', // –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è
        //                'in_progress' => '1205860710071793', // –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è
        //                'needs_clarification' => '1205860710071791', // –ü–æ–º–∏–ª–∫–∞ —Å–∞–π—Ç
        //                'completed' => '1205860710071794', // –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
        //                'canceled' => '1205860710071794', // –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
        //            ];
        //            $typeGid = $statusMap[$this->record->status] ?? null;
        //            if ($typeGid) {
        //                $customFields['1205860710071790'] = $typeGid;
        //            }
        //        }
        //
        //        // –ë—é–¥–∂–µ—Ç (—á–∞—Å—ã –ø–ª–∞–Ω)
        //        if ($this->record->budget) {
        //            $customFields['1202687202895300'] = (float) $this->record->budget;
        //        }
        //
        //        // –í–∏—Ç—Ä–∞—á–µ–Ω–æ (—á–∞—Å—ã —Ñ–∞–∫—Ç)
        //        if ($this->record->spent) {
        //            $customFields['1202687202895302'] = (float) $this->record->spent;
        //        }
        //
        //        if (! empty($customFields)) {
        //            $payload['custom_fields'] = $customFields;
        //        }

        // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        // $payload = array_filter($payload, function ($value) {
        //     return $value !== null && $value !== '' && (! is_array($value) || ! empty($value));
        // });

        Log::info('Sync to Asana payload', [
            'task_id' => $this->record->id,
            'task_gid' => $this->record->gid,
            'payload' => $payload,
        ]);

        try {
            $result = $service->updateTask($this->record->gid, $payload);

            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å–µ–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
            $this->moveTaskToSectionBasedOnStatus($service);

            Notification::make()
                ->success()
                ->title('–î–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤ Asana —É—Å–ø—ñ—à–Ω–æ')
                ->send();

            $this->refresh();
            $this->fillForm($this->record->fresh()->toArray());

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á—ñ
            $this->syncCommentsToAsana();
        } catch (AsanaError $e) {
            Log::error('Asana sync error', [
                'task_id' => $this->record->id,
                'task_gid' => $this->record->gid,
                'error' => $e->getMessage(),
                'error_details' => method_exists($e, 'getResponse') ? $e->getResponse() : null,
                'payload' => $payload,
            ]);

            Notification::make()
                ->danger()
                ->title('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Asana')
                ->body($e->getMessage())
                ->send();
        }
    }

    private function moveTaskToSectionBasedOnStatus(AsanaService $service): void
    {
        // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –≤ —Ç–æ–º –∂–µ –ø—Ä–æ–µ–∫—Ç–µ
        $targetSection = Section::where('project_id', $this->record->project_id)
            ->where('status', $this->record->status)
            ->first();

        if ($targetSection && $targetSection->asana_gid) {
            try {
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                $result = $service->moveTaskToSection($this->record->gid, $targetSection->asana_gid);
                Log::info('Asana task moved to section', [
                    'task_id' => $this->record->id,
                    'section_gid' => $targetSection->asana_gid,
                    'result' => $result,
                ]);
            } catch (AsanaError $e) {
                Log::error('Failed to move Asana task to section', [
                    'task_id' => $this->record->id,
                    'section_gid' => $targetSection->asana_gid,
                    'error' => $e->getMessage(),
                ]);
            }
        } else {
            Log::warning('No target section found for task status', [
                'task_id' => $this->record->id,
                'status' => $this->record->status,
                'project_id' => $this->record->project_id,
            ]);
        }
    }

    protected function mutateFormDataBeforeSave(array $data): array
    {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø–ª–∞–Ω–∏—Ä—É–µ–º –∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        $this->pendingComments = [];

        if (isset($data['comments']) && is_array($data['comments'])) {
            foreach ($data['comments'] as $commentData) {
                // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–æ–≤—ã–π (–Ω–µ—Ç asana_gid –∏ –Ω–µ—Ç id) –∏ –µ—Å—Ç—å content
                if (empty($commentData['asana_gid']) && empty($commentData['id']) && ! empty($commentData['content'])) {
                    $this->pendingComments[] = $commentData['content'];
                }
            }
        }

        return $data;
    }

    protected function afterSave(): void
    {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (! empty($this->pendingComments) && $this->record->gid) {
            $this->syncPendingCommentsToAsana();
        }
    }

    private function syncPendingCommentsToAsana(): void
    {
        $service = app(AsanaService::class);

        foreach ($this->pendingComments as $content) {
            try {
                $result = $service->addCommentToTask($this->record->gid, $content);

                Log::info('New comment automatically synced to Asana', [
                    'task_id' => $this->record->id,
                    'comment_gid' => $result['gid'] ?? null,
                ]);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å GID
                $comment = $this->record->comments()->whereNull('asana_gid')->latest()->first();
                if ($comment) {
                    $comment->update(['asana_gid' => $result['gid'] ?? null]);
                }

            } catch (\Exception $e) {
                Log::error('Failed to auto-sync comment to Asana', [
                    'task_id' => $this->record->id,
                    'error' => $e->getMessage(),
                ]);
            }
        }

        $this->pendingComments = [];
    }

    private function syncNewCommentToAsana(string $content): void
    {
        if (! $this->record->gid) {
            return;
        }

        try {
            $service = app(AsanaService::class);
            $result = $service->addCommentToTask($this->record->gid, $content);

            Log::info('Comment synced to Asana', [
                'task_id' => $this->record->id,
                'comment_gid' => $result['gid'] ?? null,
            ]);
        } catch (\Exception $e) {
            Log::error('Failed to sync comment to Asana', [
                'task_id' => $this->record->id,
                'error' => $e->getMessage(),
            ]);
        }
    }

    public function refreshTimerData($taskId = null)
    {
        // –ï—Å–ª–∏ taskId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
        $taskId = $taskId ?? $this->record->id;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î —Å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–µ–π
        $this->record = $this->record->fresh(['times', 'comments']);

        // –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        $this->fillForm($this->record->toArray());

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        $this->dispatch('$refresh');

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
        $this->form->fill($this->record->toArray());

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        Log::info('Timer data refreshed', [
            'task_id' => $taskId,
            'times_count' => $this->record->times()->count(),
            'comments_count' => $this->record->comments()->count(),
        ]);
    }

    private function createTaskInAsana()
    {
        $service = app(AsanaService::class);
        $payload = [
            'name' => $this->record->title,
            'notes' => $this->record->description ?? '',
        ];

        // –ü—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ)
        if ($this->record->project && $this->record->project->asana_id) {
            $payload['projects'] = [$this->record->project->asana_id];
        }

        // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞
        if ($this->record->parent && $this->record->parent->gid) {
            $payload['parent'] = $this->record->parent->gid;
        }

        // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if ($this->record->user && $this->record->user->asana_gid) {
            $payload['assignee'] = $this->record->user->asana_gid;
        }

        // –î–µ–¥–ª–∞–π–Ω
        if ($this->record->deadline) {
            $payload['due_on'] = $this->record->deadline;
        }

        // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        if ($this->record->start_date) {
            $payload['start_on'] = $this->record->start_date;
        }

        // –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        $payload['completed'] = (bool) ($this->record->is_completed ?? false);

        try {
            $result = $service->createTask($payload);

            if (isset($result['gid'])) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º GID –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞ observer'–æ–≤
                $this->record->withoutEvents(function () use ($result) {
                    $this->record->update(['gid' => $result['gid']]);
                });

                // –ï—Å–ª–∏ —É –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å —Å–µ–∫—Ü–∏—è, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ—ë –≤ –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
                if ($this->record->section && $this->record->section->asana_gid) {
                    try {
                        $service->moveTaskToSection($result['gid'], $this->record->section->asana_gid);
                        \Log::info('Task moved to section in Asana', [
                            'task_id' => $this->record->id,
                            'gid' => $result['gid'],
                            'section_gid' => $this->record->section->asana_gid,
                        ]);
                    } catch (\Exception $e) {
                        \Log::warning('Failed to move task to section in Asana', [
                            'task_id' => $this->record->id,
                            'error' => $e->getMessage(),
                        ]);
                    }
                }

                Notification::make()
                    ->success()
                    ->title('–ó–∞–¥–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ Asana')
                    ->body('GID: '.$result['gid'])
                    ->send();

                $this->refresh();
                $this->fillForm($this->record->fresh()->toArray());
            } else {
                Notification::make()
                    ->danger()
                    ->title('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ GID –Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ –∑ Asana')
                    ->send();
            }
        } catch (AsanaError $e) {
            Notification::make()
                ->danger()
                ->title('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤ Asana')
                ->body($e->getMessage())
                ->send();
        }
    }
}
