<?php

namespace App\Console\Commands;

use App\Models\Project;
use App\Models\ProjectCustomField;
use App\Models\TaskCustomField;
use App\Services\AsanaService;
use Illuminate\Console\Command;

class ManageCustomFields extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'custom-fields:manage
                            {action? : show, sync-project, sync-tasks, clear}';

    /**
     * The console command description.
     */
    protected $description = '–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–∏–º–∏ –ø–æ–ª—è–º–∏ Asana';

    /**
     * Execute the console command.
     */
    public function handle(AsanaService $service): int
    {
        $action = $this->argument('action');

        if (! $action) {
            $action = $this->choice(
                '–©–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?',
                [
                    'show' => 'üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø–æ–ª—è',
                    'sync-project' => 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –ø–æ–ª—è –ø—Ä–æ—î–∫—Ç—ñ–≤ –∑ Asana',
                    'sync-tasks' => 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —Ç–∞—Å–∫—ñ–≤',
                    'clear' => 'üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø–æ–ª—è',
                    'exit' => '‚ùå –í–∏—Ö—ñ–¥',
                ],
                'show'
            );
        }

        return match ($action) {
            'show' => $this->showCustomFields($service),
            'sync-project' => $this->syncProjectFields($service),
            'sync-tasks' => $this->syncTaskFields(),
            'clear' => $this->clearCustomFields(),
            'exit' => self::SUCCESS,
            default => $this->error("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {$action}"),
        };
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø–æ–ª—è.
     */
    protected function showCustomFields(AsanaService $service): int
    {
        $this->info('üìä –ö–ê–°–¢–û–ú–ù–Ü –ü–û–õ–Ø –í –ë–ê–ó–Ü –î–ê–ù–ò–•');
        $this->newLine();

        $projects = Project::whereNotNull('asana_id')->get();

        if ($projects->isEmpty()) {
            $this->warn('–ü—Ä–æ—î–∫—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');

            return self::SUCCESS;
        }

        foreach ($projects as $project) {
            $this->line("üìÅ <fg=cyan>{$project->name}</> (ID: {$project->id})");

            // –ü–æ–ª—è –ø—Ä–æ—î–∫—Ç—É (–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)
            $projectFields = ProjectCustomField::where('project_id', $project->id)->get();

            if ($projectFields->isEmpty()) {
                $this->line('   <fg=yellow>‚ö† –ù–µ–º–∞—î —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ–ª—ñ–≤</>');
                $this->line('   <fg=gray>–ó–∞–ø—É—Å—Ç—ñ—Ç—å: php artisan custom-fields:manage sync-project</>');
                $this->newLine();

                continue;
            }

            $this->line('   <fg=green>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤:</>');
            foreach ($projectFields as $field) {
                $icon = match ($field->type) {
                    'enum' => 'üìã',
                    'number' => 'üî¢',
                    'text' => 'üìù',
                    'date' => 'üìÖ',
                    default => '‚öôÔ∏è',
                };
                $this->line("   {$icon} {$field->name} <fg=gray>({$field->type})</>");

                // –î–ª—è enum –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
                if ($field->type === 'enum' && ! empty($field->enum_options)) {
                    foreach ($field->enum_options as $option) {
                        $this->line("      ‚Ä¢ {$option['name']}");
                    }
                }
            }

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–Ω–∞—á–µ–Ω—å
            $valuesCount = TaskCustomField::whereHas('task', function ($q) use ($project) {
                $q->where('project_id', $project->id);
            })->count();

            if ($valuesCount > 0) {
                $this->line("   <fg=green>‚úì –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω—å: {$valuesCount}</>");
            } else {
                $this->line('   <fg=yellow>‚ö† –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ç–∞—Å–∫—ñ–≤ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ</>');
                $this->line('   <fg=gray>–ó–∞–ø—É—Å—Ç—ñ—Ç—å: php artisan custom-fields:manage sync-tasks</>');
            }

            $this->newLine();
        }

        // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        $this->info('üìà –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
        $this->table(
            ['–ü–æ–∫–∞–∑–Ω–∏–∫', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'],
            [
                ['–ü—Ä–æ—î–∫—Ç—ñ–≤', $projects->count()],
                ['–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–æ–ª—ñ–≤', ProjectCustomField::count()],
                ['–ó–Ω–∞—á–µ–Ω—å –≤ —Ç–∞—Å–∫–∞—Ö', TaskCustomField::count()],
            ]
        );

        return self::SUCCESS;
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –ø–æ–ª—è –ø—Ä–æ—î–∫—Ç—ñ–≤ –∑ Asana.
     */
    protected function syncProjectFields(AsanaService $service): int
    {
        $this->info('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø–æ–ª—ñ–≤ –ø—Ä–æ—î–∫—Ç—ñ–≤ –∑ Asana...');
        $this->newLine();

        $projects = Project::whereNotNull('asana_id')->get();

        if ($projects->isEmpty()) {
            $this->warn('–ü—Ä–æ—î–∫—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');

            return self::SUCCESS;
        }

        $bar = $this->output->createProgressBar($projects->count());
        $bar->start();

        $synced = 0;
        $totalFields = 0;

        foreach ($projects as $project) {
            try {
                $fields = $service->getProjectCustomFields($project->asana_id);

                foreach ($fields as $field) {
                    ProjectCustomField::updateOrCreate(
                        [
                            'project_id' => $project->id,
                            'asana_gid' => $field['gid'],
                        ],
                        [
                            'name' => $field['name'],
                            'type' => $field['type'],
                            'description' => $field['description'],
                            'enum_options' => $field['enum_options'],
                            'is_required' => $field['is_required'],
                            'precision' => $field['precision'],
                        ]
                    );
                    $totalFields++;
                }

                $synced++;
            } catch (\Exception $e) {
                $this->newLine();
                $this->error("–ü–æ–º–∏–ª–∫–∞ –¥–ª—è –ø—Ä–æ—î–∫—Ç—É {$project->name}: {$e->getMessage()}");
            }

            $bar->advance();
        }

        $bar->finish();
        $this->newLine(2);

        $this->info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –ø—Ä–æ—î–∫—Ç—ñ–≤: {$synced}");
        $this->info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –ø–æ–ª—ñ–≤: {$totalFields}");

        if ($totalFields > 0) {
            $this->newLine();
            $this->line('üí° –¢–µ–ø–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ç–∞—Å–∫—ñ–≤:');
            $this->line('   <fg=cyan>php artisan custom-fields:manage sync-tasks</>');
        }

        return self::SUCCESS;
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —Ç–∞—Å–∫—ñ–≤.
     */
    protected function syncTaskFields(): int
    {
        $this->info('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø–æ–ª—ñ–≤ —Ç–∞—Å–∫—ñ–≤...');
        $this->newLine();

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤
        $fieldsCount = ProjectCustomField::count();
        if ($fieldsCount === 0) {
            $this->warn('‚ö†Ô∏è  –°–ø–æ—á–∞—Ç–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ –ø—Ä–æ—î–∫—Ç—ñ–≤!');
            $this->line('   <fg=cyan>php artisan custom-fields:manage sync-project</>');

            return self::FAILURE;
        }

        // –î–µ–ª–µ–≥—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ–π –∫–æ–º–∞–Ω–¥—ñ
        $this->call('asana:sync-custom-fields');

        return self::SUCCESS;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø–æ–ª—è.
     */
    protected function clearCustomFields(): int
    {
        if (! $this->confirm('‚ö†Ô∏è  –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ? –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü –∫–∞—Å—Ç–æ–º–Ω—ñ –ø–æ–ª—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!', false)) {
            $this->info('–°–∫–∞—Å–æ–≤–∞–Ω–æ');

            return self::SUCCESS;
        }

        $taskFieldsCount = TaskCustomField::count();
        $projectFieldsCount = ProjectCustomField::count();

        TaskCustomField::truncate();
        ProjectCustomField::truncate();

        $this->info("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω—å —Ç–∞—Å–∫—ñ–≤: {$taskFieldsCount}");
        $this->info("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ—î–∫—Ç—ñ–≤: {$projectFieldsCount}");

        return self::SUCCESS;
    }
}
