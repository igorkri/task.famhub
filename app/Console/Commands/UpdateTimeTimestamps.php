<?php

namespace App\Console\Commands;

use App\Models\Time;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class UpdateTimeTimestamps extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'masterok:update-time-timestamps
                            {--time-id= : ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É —á–∞—Å—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è}
                            {--url= : Custom API URL}
                            {--limit=100 : –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è}
                            {--force : –û–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ timestamps –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–û–Ω–æ–≤–ª—é—î created_at —ñ updated_at –∑–∞–ø–∏—Å—ñ–≤ —á–∞—Å—É –∑ –¥–∞–Ω–∏–º–∏ –∑ Masterok Market API';

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        $timeId = $this->option('time-id');
        $limit = (int) $this->option('limit');
        $force = (bool) $this->option('force');
        $url = $this->option('url') ?? config('services.timer_api.url', 'https://asana.masterok-market.com.ua/admin/api/timer/list');

        $this->info('üïê –ó–∞–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å–æ–≤–∏—Ö –º—ñ—Ç–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ —á–∞—Å—É –∑ Masterok Market API...');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        $this->info("üì° –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API: {$url}");

        try {
            $response = Http::timeout(30)->get($url);

            if (! $response->successful()) {
                $this->error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {$response->status()}");

                return self::FAILURE;
            }

            $apiData = $response->json();

            if (empty($apiData)) {
                $this->warn('‚ö†Ô∏è API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ');

                return self::SUCCESS;
            }

            $this->info('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Å—ñ–≤ –∑ API: '.count($apiData));

        } catch (\Exception $e) {
            $this->error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ API: '.$e->getMessage());

            return self::FAILURE;
        }

        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º API –¥–∞–Ω–Ω—ã–µ –ø–æ task_gid –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        $apiDataByTaskGid = [];
        foreach ($apiData as $record) {
            if (isset($record['task_gid'])) {
                $key = $record['task_gid'];
                if (! isset($apiDataByTaskGid[$key])) {
                    $apiDataByTaskGid[$key] = [];
                }
                $apiDataByTaskGid[$key][] = $record;
            }
        }

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
        if ($timeId) {
            $time = Time::find($timeId);
            if (! $time) {
                $this->error("‚ùå –ó–∞–ø–∏—Å —á–∞—Å—É –∑ ID {$timeId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

                return self::FAILURE;
            }

            $times = collect([$time]);
        } else {
            // –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            $query = Time::query()
                ->with('task:id,gid');

            if (! $force) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞–ø–∏—Å–∏, –¥–µ created_at –¥–æ—Ä—ñ–≤–Ω—é—î updated_at
                $query->whereRaw('created_at = updated_at');
                $this->info('üìÖ –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å–∏, –¥–µ timestamps –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑ API');
            } else {
                $this->warn('‚ö†Ô∏è –†–µ–∂–∏–º FORCE - –æ–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —á–∞—Å—É!');
            }

            $times = $query->limit($limit)->get();
        }

        if ($times->isEmpty()) {
            $this->info('‚úÖ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');

            return self::SUCCESS;
        }

        $this->info("üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {$times->count()}");

        $bar = $this->output->createProgressBar($times->count());
        $bar->start();

        $updated = 0;
        $errors = 0;
        $skipped = 0;

        foreach ($times as $time) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º task_gid
                $taskGid = $time->task?->gid;

                if (! $taskGid) {
                    $skipped++;
                    $bar->advance();

                    continue;
                }

                // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API –ø–æ task_gid –∏ duration
                $apiRecord = $this->findMatchingApiRecord($apiDataByTaskGid[$taskGid] ?? [], $time);

                if (! $apiRecord) {
                    $skipped++;
                    $bar->advance();

                    continue;
                }

                if (empty($apiRecord['created_at']) && empty($apiRecord['updated_at'])) {
                    $skipped++;
                    $bar->advance();

                    continue;
                }

                // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                $updateData = [];

                if (! empty($apiRecord['created_at'])) {
                    $updateData['created_at'] = $apiRecord['created_at'];
                }

                if (! empty($apiRecord['updated_at'])) {
                    $updateData['updated_at'] = $apiRecord['updated_at'];
                }

                if (! empty($updateData)) {
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ DB::table –¥–ª—è –æ–±—Ö–æ–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è timestamps
                    DB::table('times')
                        ->where('id', $time->id)
                        ->update($updateData);

                    $updated++;

                    Log::info('–û–Ω–æ–≤–ª–µ–Ω–æ timestamps –∑–∞–ø–∏—Å—É —á–∞—Å—É', [
                        'time_id' => $time->id,
                        'task_id' => $time->task_id,
                        'task_gid' => $taskGid,
                        'created_at' => $updateData['created_at'] ?? null,
                        'updated_at' => $updateData['updated_at'] ?? null,
                    ]);
                }

                $bar->advance();
            } catch (\Exception $e) {
                $errors++;
                Log::error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è timestamps –∑–∞–ø–∏—Å—É —á–∞—Å—É', [
                    'time_id' => $time->id,
                    'task_id' => $time->task_id ?? null,
                    'error' => $e->getMessage(),
                ]);
                $bar->advance();
            }
        }

        $bar->finish();
        $this->newLine(2);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        $this->info("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: {$updated}");
        if ($skipped > 0) {
            $this->warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö): {$skipped}");
        }
        if ($errors > 0) {
            $this->error("‚ùå –ü–æ–º–∏–ª–æ–∫: {$errors}");
        }

        $this->newLine();
        $this->info('üéâ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

        return self::SUCCESS;
    }

    /**
     * –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å API –ø–æ task_gid –∏ duration
     */
    protected function findMatchingApiRecord(array $apiRecords, Time $time): ?array
    {
        if (empty($apiRecords)) {
            return null;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ duration
        foreach ($apiRecords as $record) {
            $apiDuration = isset($record['time']) ? strtotime($record['time']) - strtotime('TODAY') : 0;

            if ($apiDuration === $time->duration) {
                return $record;
            }
        }

        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
        return $apiRecords[0] ?? null;
    }
}
